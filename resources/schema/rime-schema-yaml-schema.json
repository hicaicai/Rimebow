{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "file:C:/Users/mengq/AppData/Roaming/Rime/rime-schema-yaml-schema.json",
  "title": "Rime Schema Configuration",
  "description": "A JSON Schema for RIME schema configurations.",
  "type": "object",
  "definitions": {
    "regexString": {
      "type": "string",
      "format": "regex"
    },
    "keyCombination": {
      "type": "string"
    },
    "switchKeyActions": {
      "type": "string",
      "enum": [
        "inline_ascii",
        "commit_code",
        "commit_text",
        "noop",
        "clear"
      ]
    }, "compilingCommands": {
      "__include": {
        "type": "object"
      }, "__patch": {
        "type": "object"
      }, "__append": {
        "type": "object"
      }, "__merge": {
        "type": "object"
      }
    }
  },
  "required": ["schema", "engine"],
  "properties": {
    "schema": {
      "description": "输入方案的元信息。",
      "type": "object",
      "required": ["schema_id"],
      "additionalProperties" : false,
      "properties": {
        "schema_id": {
          "type": "string",
          "description": "方案的内部名称。"
        }, 
        "name": {
          "type": "string",
          "description": "方案的显示名称。"
        },
        "version": {
          "type": "string",
          "description": "方案的版本号。"
        },
        "author": {
          "type": ["string", "array"],
          "description": "方案的发明人、撰写者。"
        },
        "description": {
          "type": "string",
          "description": "方案历史、码表来源、方案规则等的简要描述。"
        },
        "dependencies": {
          "type": ["string", "array"],
          "description": "所依赖的其它方案。"
        }
      }
    },
    "switches": {
      "type": "array",
      "description": "输入方案定义的一系列开关。",
      "items": {
          "additionalItems": false,
          "oneOf": [{
            "type": "object",
            "required": ["name", "states"],
            "additionalProperties" : false,
            "properties": {
              "name": {
                "type": "string",
                "enum": ["ascii_mode", "full_shape", "extended_charset", "ascii_punct", "simplification", "gbk"],
                "description": "定义一个二值开关，其内部名称。"
              },
              "states": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "开关的各个状态描述。最终会显示在方案选单界面上。"
              },
              "reset": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "开关的默认状态。"
              }
            }
          }, {
            "type": "object",
            "required": ["options", "states"],
            "additionalProperties" : false,
            "properties": {
              "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "定义一个多值开关，其各个选项的内部名称，如 [zh_trad, zh_cn, zh_mars] 将得到三值开关"
                },
                "states": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "开关的各个状态描述。最终会显示在方案选单界面上。"
                },
                "reset": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "开关的默认状态。"
                }
              }
            }]
      }
    },
    "engine": {
      "description": "输入引擎设定。即挂接组件的「处方」。",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "processors": {
          "type": "array",
          "description": "负责处理各类按键消息的组件。",
          "items": {
            "additionalItems": false,
            "oneOf": [{
                "type": "string",
                "enum": ["ascii_composer"],
                "description": "处理西文模式及中西文切换。"
              }, {
                "type": "string",
                "enum": ["recognizer"],
                "description": "与 segmentors 中的 matcher 搭配，处理符合特定规则的输入码，如网址反查等 tag。"
              }, {
                "type": "string",
                "enum": ["key_binder"],
                "description": "按键绑定。"
              }, {
                "type": "string",
                "enum": ["speller"],
                "description": "拼写处理器。"
              }, {
                "type": "string",
                "enum": ["punctuator"],
                "description": "标点处理器。将单个字符按键直接映射为标点符号或文字。"
              }, {
                "type": "string",
                "enum": ["selector"],
                "description": "选字处理器。处理数字选字键、上下候选定位、换页等。"
              }, {
                "type": "string",
                "enum": ["navigator"],
                "description": "处理输入栏内的光标移动。"
              }, {
                "type": "string",
                "enum": ["express_editor"],
                "description": "编辑器。处理空格、退格、回车上屏等。"
              }, {
                "type": "string",
                "enum": ["fluency_editor"],
                "description": "句式编辑器。用于以空格断词，回车上屏的输入方案，如「注音」、「语句流」。"
              }, {
                "type": "string",
                "enum": ["chord_composer"],
                "description": "并击处理器（和弦作曲家）。用于多键并击的输入方案，如「宫保拼音」。"
              }, {
                "type": "string",
                "pattern": "^lua_processor@\\w+",
                "description": "Lua 自定义脚本处理器。使用 lua 脚本定义的自定义按键。可定义多个。需添加@{函数名}后缀，如 lua_processor@foo。函数名定义于用户文件夹下的 rime.lua。",
                "example": "lua_processor@foo"
              }]
          }
        },
        "segmentors": {
          "type": "array",
          "description": "负责识别输入内容，分段并打标记的组件。",
          "items": {
            "additionalItems": false,
            "oneOf": [{
                "type": "string",
                "enum": ["ascii_segmentor"],
                "description": "标识西文段落字母直接上屏。"
              }, {
                "type": "string",
                "enum": ["matcher"],
                "description": "与 processor 中的 recognizer 搭配，标识符合特定规则的段落，如网址、反查等。"
              }, {
                "type": "string",
                "enum": ["abc_segmentor"],
                "description": "将常规的文字段落标识为 `abc` tag。"
              }, {
                "type": "string",
                "enum": ["punct_segmentor"],
                "description": "将标点段落标识为 `punct` tag。"
              }, {
                "type": "string",
                "enum": ["fallback_segmentor"],
                "description": "标识其余未识别的段落。"
              }, {
                "type": "string",
                "pattern": "^affix_segmentor@\\w+",
                "description": "用户自定义标识器。可定义多个。需添加 @{tag} 后缀，如 affix_segmentor@foo。",
                "example": "affix_segmentor@foo"
              }, {
                "type": "string",
                "pattern": "^lua_segmentor@\\w+",
                "description": "自定义 Lua 函数标识器。可定义多个。需添加 @{函数名} 后缀，如 lua_segmentor@foo。",
                "example": "lua_segmentor@foo"
              }]
          }
        }, "translators": {
          "type": "array",
          "description": "翻译特定输入码为一组候选文字的组件。",
          "items": {
            "additionalItems": false,
            "oneOf": [{
                "type": "string",
                "enum": ["echo_translator"],
                "description": "回显输入码。输入码可以直接通过 Shift+Enter 上屏。"
              }, {
                "type": "string",
                "enum": ["punct_translator"],
                "description": "标点符号翻译器。配合 punct_segmentor 使用。"
              }, {
                "type": "string",
                "enum": ["reverse_lookup_translator"],
                "description": "反查翻译器。借助另一种编码方案查询编码。"
              }, {
                "type": "string",
                "pattern": "^table_translator@\\w+",
                "description": "码表翻译器。可定义多个。需添加 @{码表名} 后缀，如 table_translator@cangjie。",
                "example": "table_translator@cangjie"
              }, {
                "type": "string",
                "pattern": "^script_translator(@\\w+)?",
                "description": "脚本翻译器。可定义多个。需添加 @{脚本名} 后缀，如 script_translator@pinyin。",
                "example": "script_translator@pinyin"
              }, {
                "type": "string",
                "pattern": "^lua_translator@\\w+",
                "description": "Lua 函数翻译器。可定义多个。需添加 @{lua 函数名} 后缀，如 lua_translator@date_translator。Lua 函数定义于用户文件夹下的 rime.lua，参数为 (input, seg, env)。",
                "example": "lua_translator@date_translator"
              }]
          }
        }, "filters": {
          "type": "array",
          "description": "负责对翻译结果进行过滤的组件。",
          "items": {
            "additionalItems": false,
            "oneOf": [{
                "type": "string",
                "enum": ["uniquifier"],
                "description": "过滤重复的候选字。有可能来自 simplifier。"
              }, {
                "type": "string",
                "enum": ["cjk_minifier"],
                "description": "字符集过滤。仅用于 script_translator，使其支持 extended_charset 开关。"
              }, {
                "type": "string",
                "enum": ["single_char_filter"],
                "description": "单字过滤器。如加载该组件，则屏蔽词典中的词组（仅 table_translator 有效）。"
              }, {
                "type": "string",
                "enum": ["simplifier"],
                "description": "用字转换。"
              }, {
                "type": "string",
                "pattern": "^reverse_lookup_filter@\\w+",
                "description": "反查过滤器。Rime 1.0 后替代 reverse_lookup_translator，以提供更灵活的反查方式。\n可定义多个。需添加@{过滤器名称}后缀，如 reverse_lookup_filter@pinyin_lookup。",
                "example": "reverse_lookup_filter@pinyin_lookup"
              }, {
                "type": "string",
                "pattern": "^charset_filter@\\w+",
                "description": "字符集过滤器。可定义多个。需添加@{字符集名称}后缀，如 charset_filter@utf-8。",
                "example": "charset_filter@utf-8"
              }, {
                "type": "string",
                "pattern": "^lua_filter@\\w+",
                "description": "使用 Lua 函数的自定义过滤器。可定义多个。需添加@{字符集名称}后缀，如 lua_filter@single_char_first。Lua 函数名定义于用户文件夹下的 rime.lua，参数为 (input, env)。",
                "example": "lua_filter@single_char_first"
              }]
          }
        }
      }
    }
  }
}